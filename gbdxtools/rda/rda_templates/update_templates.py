import json
import requests

headers = {"Authorization": "Bearer {}".format("dummyToken"),
           "Content-Type": "application/json"}

with open('templates.json', 'r') as inputfile:
    templates_from_file = json.load(inputfile)

"""
This script searches for template metadata and stores the metadata id. 
Next the script updates template data and fetches the new id (hash of template body).
The metadata is then updated with this new id (hash of template body)
"""

for template in templates_from_file:
    # find metadata for template
    metadata_response = requests.get(
        url="https://rda.geobigdata.io/v1/template/metadata/search?free-text={}".format(template.get("id")),
        headers=headers)
    metadata_response.raise_for_status()
    # there should be 1 metadata per template
    assert len(metadata_response.json()) == 1
    metadata_id = metadata_response.json()[0].get("id")

    # remove the id as it is generated by rda
    template.pop("id")
    # post new template/updates
    template_response = requests.post(
        url="https://rda.geobigdata.io/v1/template",
        data=json.dumps(template),
        headers=headers)
    template_response.raise_for_status()
    # capture new template id
    template_id = template_response.json().get('id')

    # update new/updated template id with its respective metadata
    new_metadata = metadata_response.json()[0]
    new_metadata.update({"templateId": template_id})
    new_metadata.pop("datePublished")
    # rda will auto generate a new metadata id
    new_metadata.pop("id")
    # update the metadata
    metadata_update_response = requests.put(url="https://rda.geobigdata.io/v1/template/metadata/{}".format(metadata_id),
                                            data=json.dumps(new_metadata),
                                            headers=headers)
    metadata_update_response.raise_for_status()
    print("Updated template and metadata with {}".format(metadata_update_response))
